- name: Place policy-rc.d guard
  ansible.builtin.copy:
    dest: /usr/sbin/policy-rc.d
    mode: "0755"
    content: |
      #!/bin/sh
      exit 101

- name: Point rsyslog outchannels to /var/log
  ansible.builtin.replace:
    path: /etc/rsyslog.conf
    regexp: '(^\s*\$outchannel\s+\S+,\s*)/user/log/'
    replace: '\1/var/log/'

- name: Create target log files
  ansible.builtin.file:
    path: "/var/log/{{ item }}"
    state: touch
    owner: root
    group: adm
    mode: "0640"
  loop: [homey-pro.log, kernel.log, system.log]

- name: Ensure NetworkManager conf
  ansible.builtin.copy:
    dest: "/etc/NetworkManager/conf.d/homey.conf"
    mode: "0644"
    content: |
      [main]
      dns=dnsmasq
      [connection]
      wifi.powersave = 2
      [device]
      wifi.scan-rand-mac-address=no

# === Repo migration to Bookworm ===
- name: Temporarily disable raspbian repo (if present)
  ansible.builtin.command:
    cmd: mv /etc/apt/sources.list.d/raspbian.list /etc/apt/sources.list.d/raspbian.list.disabled
  args: { creates: /etc/apt/sources.list.d/raspbian.list.disabled }
  failed_when: false

- name: Stat /etc/apt/sources.list
  ansible.builtin.stat:
    path: /etc/apt/sources.list
  register: os_upgrade_sl_stat

- name: Find *.list in sources.list.d
  ansible.builtin.find:
    paths: /etc/apt/sources.list.d
    patterns: "*.list"
    file_type: file
  register: os_upgrade_listd_files_backports

- name: Comment out any *-backports in main list
  ansible.builtin.replace:
    path: /etc/apt/sources.list
    regexp: '^(\s*deb(-src)?\s+.*\s(bullseye|bookworm)-backports(\s|/).*)$'
    replace: '# \1'
  when: os_upgrade_sl_stat.stat.exists

- name: Comment out any *-backports in list.d
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: '^(\s*deb(-src)?\s+.*\s(bullseye|bookworm)-backports(\s|/).*)$'
    replace: '# \1'
  loop: "{{ os_upgrade_listd_files_backports.files }}"

- name: Clean apt cache (pre-update)
  ansible.builtin.apt:
    clean: true
  environment: "{{ os_upgrade_apt_env }}"
  changed_when: false

- name: Update apt cache (Debian-only)
  ansible.builtin.apt:
    update_cache: true
  environment: "{{ os_upgrade_apt_env }}"

- name: Ensure gnupg, dirmngr, ca-certificates are installed
  ansible.builtin.apt:
    name:
      - gnupg
      - dirmngr
      - ca-certificates
    state: present
    update_cache: true
  environment: "{{ os_upgrade_apt_env }}"

- name: Ensure APT dirs exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - /etc/apt/sources.list.d
    - /etc/apt/keyrings
    - /usr/share/keyrings

- name: Find list.d (incl .disabled)
  ansible.builtin.find:
    paths: /etc/apt/sources.list.d
    patterns: "*.list*"
    file_type: file
  register: os_upgrade_listd_files

- name: Rewrite /etc/apt/sources.list
  ansible.builtin.replace:
    path: /etc/apt/sources.list
    regexp: '\b{{ os_upgrade_prev_release }}\b'
    replace: "{{ os_upgrade_target_rel }}"
  when: os_upgrade_sl_stat.stat.exists

- name: Rewrite list.d/*.list
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: '\b{{ os_upgrade_prev_release }}\b'
    replace: "{{ os_upgrade_target_rel }}"
  loop: "{{ os_upgrade_listd_files.files | selectattr('path', 'search', '\\.list$') | list }}"

- name: Ensure Raspberry Pi archive repo
  ansible.builtin.copy:
    dest: /etc/apt/sources.list.d/raspi.list
    mode: "0644"
    content: |
      deb http://archive.raspberrypi.com/debian {{ os_upgrade_target_rel }} main

- name: Ensure Raspbian repo
  ansible.builtin.copy:
    dest: /etc/apt/sources.list.d/raspbian.list
    mode: "0644"
    content: |
      deb http://raspbian.raspberrypi.org/raspbian/ {{ os_upgrade_target_rel }} main contrib non-free rpi

- name: Add Raspbian archive signing key (9165938D90FDDD2E)
  ansible.builtin.apt_key:
    id: "9165938D90FDDD2E"
    keyserver: "hkp://keyserver.ubuntu.com:80"
    state: present

- name: Switch raspbian.list to signed-by when keyring exists
  ansible.builtin.stat:
    path: "{{ os_upgrade_rasp_keyring_path }}"
  register: os_upgrade_raspbian_kr

- name: Use signed-by in raspbian.list
  ansible.builtin.lineinfile:
    path: /etc/apt/sources.list.d/raspbian.list
    regexp: '^deb\s+http://raspbian\.raspberrypi\.org/raspbian/'
    line: 'deb [signed-by={{ os_upgrade_rasp_keyring_path }}] http://raspbian.raspberrypi.org/raspbian/ {{ os_upgrade_target_rel }} main contrib non-free rpi'
  when: os_upgrade_raspbian_kr.stat.exists | default(false)

- name: Ensure bookworm-backports repo is present
  ansible.builtin.copy:
    dest: /etc/apt/sources.list.d/debian-backports.list
    mode: "0644"
    content: |
      deb http://deb.debian.org/debian {{ os_upgrade_target_rel }}-backports main contrib non-free non-free-firmware

# Expect to run with become: true at play or task level

- name: Apt clean (before full update)
  ansible.builtin.apt:
    autoclean: true
  environment: "{{ os_upgrade_apt_env }}"
  changed_when: false  # aligns with your original behavior

- name: Update APT cache (Bookworm)
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
  environment: "{{ os_upgrade_apt_env }}"

# === Bootstrap zstd-capable dpkg/apt and upgrade passes ===
- name: Ensure zstd-capable tooling is present
  ansible.builtin.apt:
    name:
      - libzstd1
      - zstd
      - dpkg
      - apt
      - tar
    state: present
    update_cache: true
  environment: "{{ os_upgrade_apt_env }}"

- name: Fix broken packages (best-effort)
  ansible.builtin.command: apt -y --fix-broken install
  environment: "{{ os_upgrade_apt_env }}"
  changed_when: false
  failed_when: false

- name: Minimal upgrade
  ansible.builtin.command: >
    bash -lc "apt-get -y upgrade -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold"
  environment: "{{ os_upgrade_apt_env }}"
  changed_when: false

- name: Dist-upgrade
  ansible.builtin.command: >
    bash -lc "apt-get -y dist-upgrade -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold"
  environment: "{{ os_upgrade_apt_env }}"
  changed_when: false

- name: Full-upgrade
  ansible.builtin.command: >
    bash -lc "apt-get -y full-upgrade -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold"
  environment: "{{ os_upgrade_apt_env }}"
  changed_when: false

- name: Autoremove (purge)
  ansible.builtin.apt:
    autoremove: true
    purge: true
  environment: "{{ os_upgrade_apt_env }}"

- name: Apt clean (post-upgrade)
  ansible.builtin.apt:
    autoclean: true
  environment: "{{ os_upgrade_apt_env }}"
  changed_when: false

- name: Ensure dpkg is fully configured
  ansible.builtin.command: dpkg --configure -a
  register: os_upgrade_dpkg_configure
  changed_when: "'Setting up ' in (os_upgrade_dpkg_configure.stdout | default(''))"
  failed_when: false

- name: Fix broken packages (best-effort)
  ansible.builtin.command: apt -y --fix-broken install
  environment: "{{ os_upgrade_apt_env }}"
  changed_when: false
  failed_when: false

- name: Ensure udisks2 is present (best-effort)
  ansible.builtin.apt:
    name: udisks2
    state: present
  environment: "{{ os_upgrade_apt_env }}"
  failed_when: false

- name: Ensure "apparmor=1" is present in /boot/cmdline.txt
  ansible.builtin.lineinfile:
    path: /boot/cmdline.txt
    backrefs: true
    regexp: '^(?:(?!\bapparmor=1\b).)*$'
    line: '\g<0> apparmor=1'

- name: Ensure "security=apparmor" is present in /boot/cmdline.txt
  ansible.builtin.lineinfile:
    path: /boot/cmdline.txt
    backrefs: true
    regexp: '^(?:(?!\bsecurity=apparmor\b).)*$'
    line: '\g<0> security=apparmor'
  register: os_upgrade_apparmor_flag2

- name: Update fstab
  ansible.builtin.copy:
    dest: /etc/fstab
    content: |
      proc            /proc       proc    defaults          0       0
      /dev/mmcblk0p1  /boot   vfat    defaults,flush    0       2
      /dev/mmcblk0p2  /           ext4    defaults,noatime  0       1
      tmpfs           /tmp        tmpfs   mode=1777,nosuid,nodev         0       0
      tmpfs           /var/log    tmpfs   nosuid,nodev         0       0
      tmpfs           /var/tmp    tmpfs   nosuid,nodev         0       0
      securityfs /sys/kernel/security securityfs defaults 0 0
    owner: root
    group: root
    mode: "0644"

- name: Install AppArmor packages
  ansible.builtin.apt:
    name: [apparmor, apparmor-utils]
    state: present
    force_apt_get: true
  environment: "{{ os_upgrade_apt_env }}"

- name: Enable apparmor service (donâ€™t start now)
  ansible.builtin.systemd:
    name: apparmor
    enabled: true
    state: stopped
  failed_when: false

# Cleanup guard
- name: Remove policy-rc.d so services can start normally later
  ansible.builtin.file:
    path: /usr/sbin/policy-rc.d
    state: absent

- name: Ensure growpart is available
  ansible.builtin.apt:
    name: cloud-guest-utils
    state: present
    update_cache: true
  tags: [growroot]

- name: Remove conflicting Docker/CRI packages
  become: true
  ansible.builtin.apt:
    name:
      - docker.io
      - docker-doc
      - docker-compose
      - podman-docker
      - containerd
      - runc
    state: absent
    purge: true
    autoremove: true
  tags: [docker]

- name: Create APT keyrings directory
  become: true
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: "0755"
  tags: [docker]

- name: Download Docker GPG (ASCII armored)
  become: true
  ansible.builtin.get_url:
    url: "https://download.docker.com/linux/debian/gpg"
    dest: /etc/apt/keyrings/docker.gpg.asc
    mode: "0644"
  tags: [docker]

- name: Convert Docker GPG to keyring (dearmor)
  become: true
  ansible.builtin.command:
    cmd: "gpg --dearmor -o /etc/apt/keyrings/docker.gpg /etc/apt/keyrings/docker.gpg.asc"
  args:
    creates: /etc/apt/keyrings/docker.gpg
  tags: [docker]

- name: Set os_upgrade_docker_arch fact
  ansible.builtin.set_fact:
    os_upgrade_docker_arch: "arm64"
  tags: [docker]

- name: Add Docker APT repository (signed-by keyring)
  become: true
  ansible.builtin.apt_repository:
    filename: docker
    repo: >-
      deb [arch={{ os_upgrade_docker_arch }} signed-by=/etc/apt/keyrings/docker.gpg]
      https://download.docker.com/linux/debian
      {{ os_upgrade_target_rel }} stable
    state: present
    update_cache: true
  tags: [docker]

- name: Install Docker Engine and plugins
  become: true
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
    update_cache: true
  tags: [docker]

- name: Ensure /etc/docker exists
  become: true
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: "0755"
  tags: [docker]

- name: Write Docker daemon.json (journald + overlay2)
  become: true
  ansible.builtin.copy:
    dest: /etc/docker/daemon.json
    mode: "0644"
    content: |
      {
        "log-driver": "journald",
        "storage-driver": "overlay2"
      }
  register: os_upgrade_docker_daemonjson
  tags: [docker]

- name: Ensure Docker service is enabled and started
  become: true
  ansible.builtin.systemd:
    name: docker
    enabled: true
    state: "{{ (os_upgrade_docker_daemonjson.changed | default(false)) | ternary('restarted', 'started') }}"
  tags: [docker]
